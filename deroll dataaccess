using System;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;

namespace Percentage_Enrollment_UI
{
    public class DataAccessLayer
    {
        private string connectionString = ConfigurationManager.ConnectionStrings["CustomDB"].ConnectionString;

        /// <summary>
        /// Fetches the list of programs from the database using a stored procedure.
        /// </summary>
        public DataTable GetPrograms()
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    using (SqlCommand cmd = new SqlCommand("Enrollment_GetProgram", conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        conn.Open();

                        using (SqlDataAdapter adapter = new SqlDataAdapter(cmd))
                        {
                            DataTable programs = new DataTable();
                            adapter.Fill(programs);
                            return programs;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // Log the exception (use logging libraries like log4net, Serilog, etc. in production)
                throw new ApplicationException("An error occurred while fetching programs.", ex);
            }
        }

        /// <summary>
        /// Submits the audit request with the selected filters and parameters.
        /// </summary>
        public void SubmitAuditRequest(
            string auditFileType1,
            string auditFileType2,  // Added parameter for AuditFileType2
            string enrollmentSpecialist,
            string dsu,
            string groups,
            string addTerms,
            string percentChanges,
            DateTime startDate,
            DateTime endDate,
            string selectedPrograms,
            string includePrograms,
            string excludePrograms)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    using (SqlCommand cmd = new SqlCommand("SHPp_Percentage_Enrollment_Audit_Adhoc_Update", conn))
                    {
                        cmd.CommandType = CommandType.StoredProcedure;

                        // Add parameters to the stored procedure
                        cmd.Parameters.AddWithValue("@AuditFileType1", auditFileType1);
                        cmd.Parameters.AddWithValue("@AuditFileType2", auditFileType2);  // Added for AuditFileType2
                        cmd.Parameters.AddWithValue("@ChooseEnrollmentSpecialist", enrollmentSpecialist);
                        cmd.Parameters.AddWithValue("@ChooseDSU", dsu);
                        cmd.Parameters.AddWithValue("@SelectGroups", groups);
                        cmd.Parameters.AddWithValue("@Adds_Terms", addTerms);
                        cmd.Parameters.AddWithValue("@Percent_Member_Account_Changes", percentChanges);
                        cmd.Parameters.AddWithValue("@start_Date", startDate);
                        cmd.Parameters.AddWithValue("@end_Date", endDate);
                        cmd.Parameters.AddWithValue("@SelectPrograms", selectedPrograms); // The selected programs as a comma-separated string
                        cmd.Parameters.AddWithValue("@IncludePrograms", includePrograms); // The selected include programs as a comma-separated string
                        cmd.Parameters.AddWithValue("@ExcludePrograms", excludePrograms); // The selected exclude programs as a comma-separated string

                        // Open connection and execute the stored procedure
                        conn.Open();
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                // Log the exception (consider using a logging library in production)
                throw new ApplicationException("An error occurred while submitting the audit request.", ex);
            }
        }

        internal void SubmitAuditRequest(string selectedValue1, string selectedValue2, string selectedValue3, string selectedValue4, string selectedValue5, string text1, string text2, DateTime startDate, DateTime endDate, string includedPrograms, string excludedPrograms)
        {
            throw new NotImplementedException();
        }
    }
}
